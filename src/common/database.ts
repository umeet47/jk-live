// import { SQLDatabase } from "encore.dev/storage/sqldb";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";

// Define a database named 'encore_prisma_test', using the database migrations
// in the "./prisma/migrations" folder (where prisma will generate their migrations).
// Set `source` to `prisma` to let Encore know that the migrations are generated by Prisma.
// const DB = new SQLDatabase("encore_prisma_prod", {
//   migrations: {
//     path: "./prisma/migrations",
//     source: "prisma",
//   },
// });
// console.log("Using database:", DB.connectionString);
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL
      // url: "postgresql://nrmou_owner:npg_uoc1TQXV2Obj@ep-lucky-hall-a1u51f49-pooler.ap-southeast-1.aws.neon.tech/nrmou?sslmode=require"
      // url: DB.connectionString,
    },
  },
}).$extends({
  name: "UserExtensions",
  query: {
    user: {
      // Exclude password field from all queries
      async findMany({ args, model: _model, operation: _operation, query }) {
        const users = await query(args);
        return users.map((user) => {
          const { password, ...rest } = user;
          return rest;
        });
      },
      async findUnique({ args, model: _model, operation: _operation, query }) {
        const user = await query(args);
        if (!user) return null;
        const { password, ...rest } = user;
        return rest;
      },
      async create({ args, model: _model, operation: _operation, query }) {
        // Hash password if present
        if (args.data.password) {
          args.data.password = await bcrypt.hash(args.data.password, 10);
        }
        const user = await query(args);
        const { password, ...rest } = user;
        return rest;
      },
      async update({ args, model: _model, operation: _operation, query }) {
        // Hash password if present
        if (args.data.password) {
          const password = args.data.password as string;
          args.data.password = await bcrypt.hash(password, 10);
        }
        const user = await query(args);
        const { password, ...rest } = user;
        return rest;
      },
    },
  },
});
const prismaWithoutExtend = new PrismaClient({
  datasources: {
    db: {
      // url: "postgresql://nrmou_owner:npg_uoc1TQXV2Obj@ep-lucky-hall-a1u51f49-pooler.ap-southeast-1.aws.neon.tech/nrmou?sslmode=require"
      url: process.env.DATABASE_URL
      // url: DB.connectionString,
    },
  },
});

export { prisma, prismaWithoutExtend };
